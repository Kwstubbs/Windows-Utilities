$$ Get image base
aS /x IMG_BASE @@c++(@$peb->ImageBaseAddress);

$$ Declare some user-named aliases that equate to UDPRs
aS SEC_START @t19;
aS SEC_START @$t18;
as IMG_START @$t17;
aS IMG_END @$t16;

$$ Go to the program entrypoint
g @$exentry 

.catch{
    $$ Get pointer to NT headers
    r $t0 = $(IMG_BASE) + @@c++(((_IMAGE_DOS_HEADER *)${IMG_BASE})->e_lfanew)

    $$Now from the IMAGE_NT_HEADERS.FileHeader, get the size of the optionnal header
    r $t1 = @@c++(!_IMAGE_NT_HEADERS*)@$t0)-> FileHeader.SizeOfOptionalHeader)

    $$Compute the address to the first section
    $$skip signature, size of file headers and size of optional headers
    r $t2 = @$t0 + 4 + @@c++(sizeof(ole32!_IMAGE_FILE_HEADER)) + @$t1;

    $$Get the first section boundaries
    r ${SEC_START} = IMAGE_BASE + @@c++(((_IMAGE_SECTION_HEADER *)@$t2)->VirtualAddress);

    r ${SEC_END} = IMG_BASE + @@c++(((_IMAGE_SECTION_HEADER *)@$t2)->Misc.VirtualSize);

    $$Compute the image boundaries
    r ${IMAGE_START} = IMAGE_BASE;
    r ${IMG_END} = IMG_START + @@c++(((_IMAGE_NT_HEADERS *)@$t0)->OptionalHeader.SizeOfImage);

    $$The logic is as follows
    $$ 1. Trace
    $$ 2. If IP is outside of image then "gu"
    .for (r $t0 =0; 1; r $t0 = @$t0 +1)
    {
        $$ Trace once more to see where it leads
        t;

        $$IP outside iamge boundaires?
        .if (@ip < ${IMG_START}) or (@$ip > ${IMG_End})
        {
            gu;
            .continue;
        }

        $$IP within the first section?
        .if (@$ip >= ${SEC_START}) and (@$ip <= ${SEC_END})
        {
            .printf"--Reached first section ---\n";
            u;
            .break;
        }
    }
}